До выполнения этого тестового задания я никогда ранее не сталкивался с фреймворком FastAPI. Первым делом пришлось почитать для чего он используется,
как его запустить и как с его помощью реализовать API. При таком коротком знакомстве фрейморк показал себя с лучшей стороны, простой запуск,
возможность достаточно быстро для любого приложения получить API, буквально 2 дополнительные строчки внутри приложения, и эндпоинт будет работать.
Следующий этап - реализация самого калькулятора. Сложности выполнения задания добавило требование ТЗ по невозможности использовать eval.
Вторая сложность - выполнение арифметических выражений, не математический приоритет, а слева направо.
К сожалению, это требование вызвало у меня затруднение и мне не удалось реализовать калькулятор для трех и более математических действий.
Таким образом, моя реализация калькулятора позволяет работать только с математическими выражениями из двух элементов.

Следующим шагом стала реализация эндпоинта history. У меня была идея реализовать хранение данных в БД Sqlite, но я отказался от этой идеи
в пользу хранения запросов, ответов и их статуса внутри списка. Реализация с БД мне показалось не рациональной для простого калькулятора,
т.к. не хотелось чтобы он затрачивал лишние ресурсы. Для ограничения количества сохраненных результатов работы калькулятора была добавлена
переменная cnt_elem_history, ее значение указывает на то, сколько записей будет храниться внутри списка.